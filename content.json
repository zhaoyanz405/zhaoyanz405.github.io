{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/26/hello-world/"},{"title":"MongoDB配置实践","text":"单台ubuntu实现mongodb副本集新建测试目录 123456mkdir /data/mongod/mkdir /data/mongod/db0 #存储mongodb实例1的数据库文件mkdir /data/mongod/db1 #存储mongodb实例2的数据库文件mkdir /data/mongod/db2 #存储mongodb实例3的数据库文件mkdir /data/mongod/logs #存储log文件mkdir /data/mongod/conf #mongodb启动配置文件 创建启动配置文件 12cd /data/mongod/confvi mongod0.conf 编辑内容： 1234567891011121314151617181920212223242526272829303132storage: dbPath: /data/mongod/db0# engine:# mmapv1:# wiredTiger:# where to write logging data.systemLog: destination: file logAppend: false path: /data/mongod/logs/mongod0.log# network interfacesnet: port: 27017 bindIp: 127.0.0.1# how the process runsprocessManagement: timeZoneInfo: /usr/share/zoneinfo pidFilePath: /data/mongod/mongod0.pidreplication: oplogSizeMB: 10240 replSetName: IDY secondaryIndexPrefetch: all#security:# keyFile: /data/mongod/keyfile.key# clusterAuthMode: keyFile# authorization: enabled 多台机器需要配置security项， 生成key后拷贝至其他机器，并在配置文件中制定keyfile位置 12openssl rand -base64 666 &gt; keyfile.keychmod 600 mongodb.key 启动多个mongodb实例 123mongod -f mongod0.confmongod -f mongod1.confmongod -f mongod2.conf 若无失败，则进入db shell 1mongo 127.0.0.1:27017 执行 12345678910111213141516171819202122232425262728config = { \"_id\": \"IDY\", \"version\": 1, \"members\": [ { \"_id\": 0, \"host\": \"127.0.0.1:27017\", \"arbiterOnly\": false, \"hidden\": false, \"priority\": 10 }, { \"_id\": 1, \"host\": \"127.0.0.1:27018\", \"arbiterOnly\": false, \"hidden\": false, \"priority\": 1 }, { \"_id\": 2, \"host\": \"127.0.0.1:27019\", \"arbiterOnly\": false, \"hidden\": false, \"priority\": 1 } ]}rs.initiate(config) 再次进入各个db查看结构是否更改 123IDY:PRIMARY&gt;IDY:SECONDARY&gt;IDY:SECONDARY&gt; 在PRIMARY中插入数据： 12345678910111213IDY:PRIMARY&gt; show dbsadmin 0.000GBconfig 0.000GBlocal 0.000GBtest 0.000GBIDY:PRIMARY&gt; use testswitched to db testIDY:PRIMARY&gt; db.test.find({})IDY:PRIMARY&gt; db.test.insert({'info': 'test'})WriteResult({ \"nInserted\" : 1 })IDY:PRIMARY&gt; db.test.find({}){ \"_id\" : ObjectId(\"5bd27eaaf52562fd198fc9a3\"), \"info\" : \"test\" }IDY:PRIMARY&gt; 在SECONDARY中查看数据： 出现错误，原因是副本集不允许读写 123456789101112131415161718192021IDY:SECONDARY&gt; show dbs2018-10-26T10:41:25.207+0800 E QUERY [js] Error: listDatabases failed:{ \"operationTime\" : Timestamp(1540521683, 1), \"ok\" : 0, \"errmsg\" : \"not master and slaveOk=false\", \"code\" : 13435, \"codeName\" : \"NotMasterNoSlaveOk\", \"$clusterTime\" : { \"clusterTime\" : Timestamp(1540521683, 1), \"signature\" : { \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"), \"keyId\" : NumberLong(0) } }} :_getErrorWithCode@src/mongo/shell/utils.js:25:13Mongo.prototype.getDBs@src/mongo/shell/mongo.js:67:1shellHelper.show@src/mongo/shell/utils.js:876:19shellHelper@src/mongo/shell/utils.js:766:15@(shellhelp2):1:1IDY:SECONDARY&gt; 执行rs.slaveOk()，启用读写，再次查看数据： 1234567891011IDY:SECONDARY&gt; rs.slaveOk()IDY:SECONDARY&gt; show dbsadmin 0.000GBconfig 0.000GBlocal 0.000GBtest 0.000GBIDY:SECONDARY&gt; use testswitched to db testIDY:SECONDARY&gt; db.test.find({}){ \"_id\" : ObjectId(\"5bd27eaaf52562fd198fc9a3\"), \"info\" : \"test\" }IDY:SECONDARY&gt; 升级： 使用service管理mongod进程编辑service文件tips: service文件位置 ubuntu: /lib/systemd/system/mongod.service centos: /var/lib/systemd/system/mongod.service 拷贝编辑service文件与mongod进程对应 12345678910111213141516171819202122232425262728293031323334[Unit]Description=MongoDB Database ServerAfter=network.targetDocumentation=https://docs.mongodb.org/manual[Service]User=rootGroup=rootEnvironmentFile=-/etc/default/mongodExecStart=/usr/bin/mongod --config /data/mongod/conf/mongod0.confPermissionsStartOnly=truePIDFile=/data/monogd/mongod0.pidType=forking# file sizeLimitFSIZE=infinity# cpu timeLimitCPU=infinity# virtual memory sizeLimitAS=infinity# open filesLimitNOFILE=64000# processes/threadsLimitNPROC=64000# locked memoryLimitMEMLOCK=infinity# total threads (user+kernel)TasksMax=infinityTasksAccounting=false# Recommended limits for for mongod as specified in# http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings[Install]WantedBy=multi-user.target 1234root@zhaoy-YangTianM4000e-07:/data/mongod/conf# ll /lib/systemd/system/mongod*-rw-r--r-- 1 root root 749 10月 26 10:52 /lib/systemd/system/mongod0.service-rw-r--r-- 1 root root 749 10月 26 10:57 /lib/systemd/system/mongod1.service-rw-r--r-- 1 root root 749 10月 26 10:57 /lib/systemd/system/mongod2.service","link":"/2020/04/26/MongoDB%E9%85%8D%E7%BD%AE%E5%AE%9E%E8%B7%B5/"},{"title":"如何保护Python代码","text":"Python代码保护一、发行特定格式的文件1）发行.pyc方法通过标准库compileall将代码目录中py文件编译为pyc文件，然后删除py文件。(默认编译后的pyc在__pycache__目录下的, -b参数指定生成到与文件相同目录) 1python -m compileall -b &lt;src&gt; 优点简单、快速、平台兼容性好。 缺点只支持CPython，反编译成本低，有现成的反编译工具，如python-uncompyle6。 2）发行.pyd/.socython可以将python文件转为c文件，并编译成pyd文件。一般将核心模块编译成pyd。 项目地址：https://cython.org/ 方法安装Cython1pip install Cython 创建setup.py12345678from distutils.core import setupfrom Cython.Build import cythonizesetup( name='protect project app', ext_modules=cythonize('main.py')) 运行命令 python setup.py build_ext –inplace1234567891011121314151617181920212223(venv) C:\\Users\\ZhaoYan\\PycharmProjects\\protect&gt;python setup.py build_ext --inplaceCompiling main.py because it changed.[1/1] Cythonizing main.pyC:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\lib\\site-packages\\Cython\\Compiler\\Main.py:369: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\main.py tree = Parsing.p_module(s, pxd, full_module_name)running build_extbuilding 'main' extensioncreating buildcreating build\\temp.win32-3.8creating build\\temp.win32-3.8\\ReleaseC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\bin\\HostX86\\x86\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\include \"-IC:\\Program Files (x86)\\Python38-32\\include\" \"-IC:\\Program Files (x86)\\Python38-32\\include\" \"-IC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\ATLMFC\\include\" \"-IC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\" \"-IC:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\include\\um\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\ucrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\um\" \"-IC:\\Program Files(x86)\\Windows Kits\\10\\include\\10.0.18362.0\\winrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\cppwinrt\" /Tcmain.c /Fobuild\\temp.win32-3.8\\Release\\main.objmain.cC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\bin\\HostX86\\x86\\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\libs \"/LIBPATH:C:\\Program Files (x86)\\Python38-32\\libs\" \"/LIBPATH:C:\\Program Files (x86)\\Python38-32\" /LIBPATH:C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\PCbuild\\win32 \"/LIBPATH:C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\ATLMFC\\lib\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\lib\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\lib\\um\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.18362.0\\ucrt\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.18362.0\\um\\x86\" /EXPORT:PyInit_main build\\temp.win32-3.8\\Release\\main.obj /OUT:C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\main.cp38-win32.pyd /IMPLIB:build\\temp.win32-3.8\\Release\\main.cp38-win32.lib 正在创建库 build\\temp.win32-3.8\\Release\\main.cp38-win32.lib 和对象 build\\temp.win32-3.8\\Release\\main.cp38-win32.exp正在生成代码已完成代码的生成 项目中会多一些文件 pyd仍然可以像平常一样使用。linux下可以编译为.so文件 优点：需要比较高的破解成本（基本上只能通过反汇编来破解）。 3）使用Nuitka打包项目将python代码编译为C代码 项目地址：https://github.com/Nuitka/Nuitka 优点：破解成本相对较高，性能有部分提升。 缺点：不适合经常需要发布的项目 二、混淆1）使用pyminifier安装1pip install pyminifier 用法1pyminifier -O test.py 示例源文件 123456class Mod(object): def __init__(self, a): self.a = a def add(self, b): return self.a + b 混淆后 12345678(venv) C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\Scripts&gt;pyminifier -O --nonlatin C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\modules\\code.pyclass ﮊ(ܦ):ܦ=object def __init__(�,�): �.a=� def ࡓ(�,b): return �.a+b# Created by pyminifier (https://github.com/liftoff/pyminifier) 三、定制解释器思路通过密钥对文件加密，定制解释器加载文件时解密。在python源代码打开或加载前增加解密处理，使解释器能够运行对应加密方式的python代码。 参考链接 优点：通过源文件完全不可能获取到源代码。 缺点：代码只能运行在定制解释器上 。通过python shell也有可能获取到源码。 四、其他方法1）部署自己的服务器上。客户服务器可以考虑部署在设置密码的虚拟机上2）代码加载到内存后，删除磁盘文件3）申请知识产权，通过法律保护","link":"/2020/04/26/%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8A%A4Python%E4%BB%A3%E7%A0%81/"},{"title":"Git初级教程","text":"Git是目前最流行的分布式版本控制系统。 Git中的常用概念： repo - 仓库，指的是一个使用git做版本控制的目录。目录下存在一个.git/目录。 branch - 分支，commit点分裂的代码分支。放张图比较好理解 工作区、暂存区和版本库 Git的工作流程创建仓库创建并初始化一个git仓库。要将一个已经存在目录变为git仓库，只需要使用git init命令即可。 添加一个文件到暂存区，查看文件状态在仓库中的文件有以下几个状态： 初次创建的文件状态为Untracked files 意为，未被git工具跟踪。 使用git add命令加入到git暂存区（暂存区是一个临时git工作目录，只有通过git commit命令才能将暂存区的所有改动提交到仓库里），文件状态变更为new file 如果出现冲突则文件状态在分支合并时会变为both modified 清除git add的结果，即，将文件状态有new file变更为Untracked files在git status时，已有提示 提交文件有两种方式提交 git commit -m(不推荐) git commit（推荐）使用git commit命令后会进入Vim编辑器（使用哪个编辑器来编辑commit信息，取决于.git/config中的配置）填写commit信息。推荐这种方式的commit的原因是能够书写更多的信息，更美观的格式。一些开源项目通常对commit信息有格式要求。例如上图。在内核开发的提交中通常commit最后一行要写明Signed-off-by，表明自己对这个commit负责。 commit错误了，需要回退。现在假设我们错误的提交了test.txt文件，这里我们希望回退到提交test之前。那么第一步就是通过git日志查看提交时的commit记录。git log我们希望能回退到add test之前，那么在log中add test之前最后一个commit就是红框内的commit（这个字符串叫做commit id）。git reset使用git reset回退到某个历史版本，期间的所有commit都会变为Untracked的状态，意思是文件的修改仍然在磁盘上。如果想要废弃回退期间所有的commit，那么可以指定reset使用hard模式即，hard模式有一定的危险性，如果回退错了commit，那文件的改动就无法找回了。使用时需要谨慎。 分支查看当前所在分支，branch名字前有/*号的就是当前分支 创建分支通常创建分支的含义，是在某个分支基础上创建新的分支。假设我们以master为基础创建test分支。git checkout -b表示，创建新分支并切换到该分支 切换分支假设切回master分支。 删除分支 commit之后，需要push到远程仓库的对应分支通常自己本地的git仓库不会有push的需求。这里讨论的push，是讨论本地仓库与云端仓库之间的操作。云端仓库通常是托管在github上或者gitlab上。如图箭头代表push，理论上不但可以push到自己仓库，甚至可以push到其他的仓库中。 远端仓库的相关配置通过git remote命令来维护。可以使用git remote命令查看当前有哪些远端分支通常现在github上创建，然后再本地clone的项目，默认有一个远端分支叫origin，如下： 我们可以添加remote仓库，假设我们添加公司gitlab作为另一个远端仓库，起名叫做work。这里最后一个参数是远端仓库的url。 commit之前最好先pull，没有任何error字样即为成功从指定远端服务器pull 推送到远程分支默认写法 1git push 这里其实省略了两个参数。 哪个仓库 哪个分支所以相对完整的写法应该是：1git push origin master 意为推送当前仓库此时所在的分支到origin仓库的master分支 代码合并与冲突Merge是指两个分支间的合并过程。合并是由git自动完成的。 这里我们以test仓库为例，从master创建一个feature分支。并分别在master和feature上提交一次代码。然后进行分支合并。通常只要不是改动了相同一行，merge是会成功的。 冲突（conflict）both modified显示的是有冲突的文件，遇到冲突可以选择中止合并。可以看到MERGING状态已经不见了。 如果要解决冲突，只能去编辑这个文件，并重新commit。 &lt;&lt;&lt;HEAD到 &gt;&gt;&gt;之间是冲突内容。====上方的是当前分支中的冲突行，下方是即将合并分支的冲突行。我们可以对这个文件做任意修改，commit时，最终版本库里的内容会以我们的改动为准。 这里我们选择，两边的改动都要接受，修改文件如下： 然后add, commit, 有时pull也会出现冲突，因为pull过程中也存在merge动作 隐藏参数git checkout –ours file 或者 git checkout –theirs file 接受自己的改动或者接受对方的所有改动。 mergetools解决冲突时，直接编辑文件实在太不方便。git 提供了使用外部工具来解决冲突的方式。参考： https://www.yiibai.com/git/git_mergetool.html https://www.zhihu.com/question/21215715 打标签标签只是某个commit的标记，通常打标签可能是某个功能发布，或者某个版本发布了。查看项目中所有标签，以tornado源码仓库为例。查看某个tag的详细信息创建tag以test仓库为例，为第一次提交添加标签 利用tag可以使我们阅读某个项目的源码更容易以tornado仓库为例，我们可以通过tag，来阅读更早期的代码，这是因为早期的代码通常只实现核心功能，没有太多的干扰。你也可以加入-b参数，将tag之前的所有commit单独创建一个分支。 补丁以test仓库为例，在master上提交一个commit 假设现在已经有很多commit了，希望红框内的commit能够合并到feature分支，但不想合并其他commit，那么我们有两种办法实现 通过patch打补丁 通过git rebase rebase比较难理解，不熟练的话容易出错，所以我们优先选择patch方式创建patch最后一个参数为commit id，如果不填默认就是从最近的提交开始-1表示从该commit id开始创建几个分支，所以可以写-2，-3……应用patch切换到feature分支，并应用，如图，如果出现apply：等字样就是成功了。图中情况提示我们应用patch失败，这种情况，最好还是中止掉。这次失败的原因是，上一次我们为了验证冲突，修改了相同的文件行。 我们回到master将feature合并后，重新尝试创建patch尝试apply可以看到已经appy成功了 几个常见不一定常用的命令git diff 比较文件不同git fetch 拉取远端仓库的所有更新git rebase合并多个commit，或者merge单个commit到某个分支 参考：Git中文手册菜鸟Git教程","link":"/2020/04/25/Git%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/"},{"title":"Debian编译安装nginx 1.18","text":"Debian编译安装nginx 1.18准备编译环境12345apt-get install build-essentialapt-get install gcc makeapt-get install libpcre+*apt-get install zlib1g*apt-get install libssl-dev 下载并解压文件12wget http://nginx.org/download/nginx-1.18.0.tar.gztar -zxvf nginx-1.18.0.tar.gz 配置编译参数，安装如果要使用https，则需要指定-with-http_stub_status_module –with-http_ssl_module –with-file-aio –with-http_realip_module 12./configure --prefix=/usr/local/nginxmake &amp;&amp; make install","link":"/2020/04/26/Debian%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx-1-18/"}],"tags":[{"name":"MongoDB","slug":"MongoDB","link":"/tags/MongoDB/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"}],"categories":[]}