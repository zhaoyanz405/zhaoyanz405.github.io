{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/26/hello-world/"},{"title":"MongoDB配置实践","text":"单台ubuntu实现mongodb副本集新建测试目录 123456mkdir /data/mongod/mkdir /data/mongod/db0 #存储mongodb实例1的数据库文件mkdir /data/mongod/db1 #存储mongodb实例2的数据库文件mkdir /data/mongod/db2 #存储mongodb实例3的数据库文件mkdir /data/mongod/logs #存储log文件mkdir /data/mongod/conf #mongodb启动配置文件 创建启动配置文件 12cd /data/mongod/confvi mongod0.conf 编辑内容： 1234567891011121314151617181920212223242526272829303132storage: dbPath: /data/mongod/db0# engine:# mmapv1:# wiredTiger:# where to write logging data.systemLog: destination: file logAppend: false path: /data/mongod/logs/mongod0.log# network interfacesnet: port: 27017 bindIp: 127.0.0.1# how the process runsprocessManagement: timeZoneInfo: /usr/share/zoneinfo pidFilePath: /data/mongod/mongod0.pidreplication: oplogSizeMB: 10240 replSetName: IDY secondaryIndexPrefetch: all#security:# keyFile: /data/mongod/keyfile.key# clusterAuthMode: keyFile# authorization: enabled 多台机器需要配置security项， 生成key后拷贝至其他机器，并在配置文件中制定keyfile位置 12openssl rand -base64 666 &gt; keyfile.keychmod 600 mongodb.key 启动多个mongodb实例 123mongod -f mongod0.confmongod -f mongod1.confmongod -f mongod2.conf 若无失败，则进入db shell 1mongo 127.0.0.1:27017 执行 12345678910111213141516171819202122232425262728config = { \"_id\": \"IDY\", \"version\": 1, \"members\": [ { \"_id\": 0, \"host\": \"127.0.0.1:27017\", \"arbiterOnly\": false, \"hidden\": false, \"priority\": 10 }, { \"_id\": 1, \"host\": \"127.0.0.1:27018\", \"arbiterOnly\": false, \"hidden\": false, \"priority\": 1 }, { \"_id\": 2, \"host\": \"127.0.0.1:27019\", \"arbiterOnly\": false, \"hidden\": false, \"priority\": 1 } ]}rs.initiate(config) 再次进入各个db查看结构是否更改 123IDY:PRIMARY&gt;IDY:SECONDARY&gt;IDY:SECONDARY&gt; 在PRIMARY中插入数据： 12345678910111213IDY:PRIMARY&gt; show dbsadmin 0.000GBconfig 0.000GBlocal 0.000GBtest 0.000GBIDY:PRIMARY&gt; use testswitched to db testIDY:PRIMARY&gt; db.test.find({})IDY:PRIMARY&gt; db.test.insert({'info': 'test'})WriteResult({ \"nInserted\" : 1 })IDY:PRIMARY&gt; db.test.find({}){ \"_id\" : ObjectId(\"5bd27eaaf52562fd198fc9a3\"), \"info\" : \"test\" }IDY:PRIMARY&gt; 在SECONDARY中查看数据： 出现错误，原因是副本集不允许读写 123456789101112131415161718192021IDY:SECONDARY&gt; show dbs2018-10-26T10:41:25.207+0800 E QUERY [js] Error: listDatabases failed:{ \"operationTime\" : Timestamp(1540521683, 1), \"ok\" : 0, \"errmsg\" : \"not master and slaveOk=false\", \"code\" : 13435, \"codeName\" : \"NotMasterNoSlaveOk\", \"$clusterTime\" : { \"clusterTime\" : Timestamp(1540521683, 1), \"signature\" : { \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"), \"keyId\" : NumberLong(0) } }} :_getErrorWithCode@src/mongo/shell/utils.js:25:13Mongo.prototype.getDBs@src/mongo/shell/mongo.js:67:1shellHelper.show@src/mongo/shell/utils.js:876:19shellHelper@src/mongo/shell/utils.js:766:15@(shellhelp2):1:1IDY:SECONDARY&gt; 执行rs.slaveOk()，启用读写，再次查看数据： 1234567891011IDY:SECONDARY&gt; rs.slaveOk()IDY:SECONDARY&gt; show dbsadmin 0.000GBconfig 0.000GBlocal 0.000GBtest 0.000GBIDY:SECONDARY&gt; use testswitched to db testIDY:SECONDARY&gt; db.test.find({}){ \"_id\" : ObjectId(\"5bd27eaaf52562fd198fc9a3\"), \"info\" : \"test\" }IDY:SECONDARY&gt; 升级： 使用service管理mongod进程编辑service文件tips: service文件位置 ubuntu: /lib/systemd/system/mongod.service centos: /var/lib/systemd/system/mongod.service 拷贝编辑service文件与mongod进程对应 12345678910111213141516171819202122232425262728293031323334[Unit]Description=MongoDB Database ServerAfter=network.targetDocumentation=https://docs.mongodb.org/manual[Service]User=rootGroup=rootEnvironmentFile=-/etc/default/mongodExecStart=/usr/bin/mongod --config /data/mongod/conf/mongod0.confPermissionsStartOnly=truePIDFile=/data/monogd/mongod0.pidType=forking# file sizeLimitFSIZE=infinity# cpu timeLimitCPU=infinity# virtual memory sizeLimitAS=infinity# open filesLimitNOFILE=64000# processes/threadsLimitNPROC=64000# locked memoryLimitMEMLOCK=infinity# total threads (user+kernel)TasksMax=infinityTasksAccounting=false# Recommended limits for for mongod as specified in# http://docs.mongodb.org/manual/reference/ulimit/#recommended-settings[Install]WantedBy=multi-user.target 1234root@zhaoy-YangTianM4000e-07:/data/mongod/conf# ll /lib/systemd/system/mongod*-rw-r--r-- 1 root root 749 10月 26 10:52 /lib/systemd/system/mongod0.service-rw-r--r-- 1 root root 749 10月 26 10:57 /lib/systemd/system/mongod1.service-rw-r--r-- 1 root root 749 10月 26 10:57 /lib/systemd/system/mongod2.service","link":"/2020/04/26/MongoDB%E9%85%8D%E7%BD%AE%E5%AE%9E%E8%B7%B5/"},{"title":"如何保护Python代码","text":"Python代码保护一、发行特定格式的文件1）发行.pyc方法通过标准库compileall将代码目录中py文件编译为pyc文件，然后删除py文件。(默认编译后的pyc在__pycache__目录下的, -b参数指定生成到与文件相同目录) 1python -m compileall -b &lt;src&gt; 优点简单、快速、平台兼容性好。 缺点只支持CPython，反编译成本低，有现成的反编译工具，如python-uncompyle6。 2）发行.pyd/.socython可以将python文件转为c文件，并编译成pyd文件。一般将核心模块编译成pyd。 项目地址：https://cython.org/ 方法安装Cython1pip install Cython 创建setup.py12345678from distutils.core import setupfrom Cython.Build import cythonizesetup( name='protect project app', ext_modules=cythonize('main.py')) 运行命令 python setup.py build_ext –inplace1234567891011121314151617181920212223(venv) C:\\Users\\ZhaoYan\\PycharmProjects\\protect&gt;python setup.py build_ext --inplaceCompiling main.py because it changed.[1/1] Cythonizing main.pyC:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\lib\\site-packages\\Cython\\Compiler\\Main.py:369: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\main.py tree = Parsing.p_module(s, pxd, full_module_name)running build_extbuilding 'main' extensioncreating buildcreating build\\temp.win32-3.8creating build\\temp.win32-3.8\\ReleaseC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\bin\\HostX86\\x86\\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -IC:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\include \"-IC:\\Program Files (x86)\\Python38-32\\include\" \"-IC:\\Program Files (x86)\\Python38-32\\include\" \"-IC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\ATLMFC\\include\" \"-IC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\" \"-IC:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\include\\um\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\ucrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\um\" \"-IC:\\Program Files(x86)\\Windows Kits\\10\\include\\10.0.18362.0\\winrt\" \"-IC:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\cppwinrt\" /Tcmain.c /Fobuild\\temp.win32-3.8\\Release\\main.objmain.cC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\bin\\HostX86\\x86\\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\libs \"/LIBPATH:C:\\Program Files (x86)\\Python38-32\\libs\" \"/LIBPATH:C:\\Program Files (x86)\\Python38-32\" /LIBPATH:C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\PCbuild\\win32 \"/LIBPATH:C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\ATLMFC\\lib\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\lib\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\lib\\um\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.18362.0\\ucrt\\x86\" \"/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.18362.0\\um\\x86\" /EXPORT:PyInit_main build\\temp.win32-3.8\\Release\\main.obj /OUT:C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\main.cp38-win32.pyd /IMPLIB:build\\temp.win32-3.8\\Release\\main.cp38-win32.lib 正在创建库 build\\temp.win32-3.8\\Release\\main.cp38-win32.lib 和对象 build\\temp.win32-3.8\\Release\\main.cp38-win32.exp正在生成代码已完成代码的生成 项目中会多一些文件 pyd仍然可以像平常一样使用。linux下可以编译为.so文件 优点：需要比较高的破解成本（基本上只能通过反汇编来破解）。 3）使用Nuitka打包项目将python代码编译为C代码 项目地址：https://github.com/Nuitka/Nuitka 优点：破解成本相对较高，性能有部分提升。 缺点：不适合经常需要发布的项目 二、混淆1）使用pyminifier安装1pip install pyminifier 用法1pyminifier -O test.py 示例源文件 123456class Mod(object): def __init__(self, a): self.a = a def add(self, b): return self.a + b 混淆后 12345678(venv) C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\venv\\Scripts&gt;pyminifier -O --nonlatin C:\\Users\\ZhaoYan\\PycharmProjects\\protect\\modules\\code.pyclass ﮊ(ܦ):ܦ=object def __init__(�,�): �.a=� def ࡓ(�,b): return �.a+b# Created by pyminifier (https://github.com/liftoff/pyminifier) 三、定制解释器思路通过密钥对文件加密，定制解释器加载文件时解密。在python源代码打开或加载前增加解密处理，使解释器能够运行对应加密方式的python代码。 参考链接 优点：通过源文件完全不可能获取到源代码。 缺点：代码只能运行在定制解释器上 。通过python shell也有可能获取到源码。 四、其他方法1）部署自己的服务器上。客户服务器可以考虑部署在设置密码的虚拟机上2）代码加载到内存后，删除磁盘文件3）申请知识产权，通过法律保护","link":"/2020/04/26/%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8A%A4Python%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"MongoDB","slug":"MongoDB","link":"/tags/MongoDB/"},{"name":"python","slug":"python","link":"/tags/python/"}],"categories":[]}